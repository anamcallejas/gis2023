getwd() # learn which is the current working directory
setwd("~/Desktop/")
getwd() # learn which is the current working directory
c("a", "b", "c", "abc", "def")
vector <- c("a", "b", "c", "abc", "def")
vector[2]
vector[-2]
vector <- rep(vector, 2)
vector
# creating datasets - data.frame function:
dset <- data.frame(a = 1:10, b = 101:110, words = vector, stringsAsFactors=T)
class(dset)
# be careful with factors in R!
class(dset$words)
as.numeric(dset$words)
dset <- data.frame(a = 1:10, b = 101:110, words = vector, stringsAsFactors=F)
class(dset$words)
as.numeric(dset$words)
# creating datasets - data.frame function:
dset <- data.frame(a = 1:10, b = 101:110, words = vector, stringsAsFactors=T)
class(dset)
# be careful with factors in R! Factors -> as.numeric
class(dset$words)
as.numeric(dset$words)
dset <- data.frame(a = 1:10, b = 101:110, words = vector, stringsAsFactors=F)
class(dset$words)
as.numeric(dset$words)
dset[1,2]
dset[1, 'b']
dset[,2]
dset[,'b']
dset$b
# plotting:
plot(dset$a, dset$b)
# appending data:
dset <- rbind(dset, c(3,6, "bruno"))
# the same for cbind (over columns)
dset
# creating lists (sets):
dlist <- list(a = c("a", "b", "c", "abc", "def"), b = dset)
dlist[[1]]
dlist$a
dlist
ls() # list of elements in the environment
rm(dset)
rm(dlist)
rm(list = ls()) # cleaning environment
ls() # list of elements in the environment
# install library (only once for each computer):
install.packages('data.table')
# load library (its functions will become available):
library(data.table)
# data.table::year(as.Date('10-01-1959'))
# once the library is loaded, no need of data.table::
year(as.Date('10-01-1959'))
datasets::AirPassengers
df.airqual <- data.table(airquality)
df.airqual
df.months <- data.table(Month = 1:12, month.text = month.name)
df.months
merge.data.table(df.airqual,df.months)
View(df.months)
View(df.airqual)
df.merged <- merge.data.table(df.airqual,df.months)
library(dplyr)
# Merging:
df.merged <- df.airqual %>%
left_join(df.months)
View(df.merged)
View(df.months)
View(df.merged)
# Tibbles - class of tidyverse data frames:
df.merged <- tibble(df.merged)
# Merging:
df.merged <- df.airqual %>%
left_join(df.months)
# Tibbles - class of tidyverse data frames:
df.merged <- tibble(df.merged)
df.merged # Better way of visualizing data frames.
# Selecting specific variables:
df.merged %>%
select(month.text, Day, Wind)
# Filtering a dataset:
df.merged %>%
filter(Month==5)
# Combining operations:
df.merged %>%
filter(month.text=='August') %>%
select(Month,Day,Ozone)
# Rdata files: optimized storage (wrt disk space):
save(df.merged,file = 'merged_dataset.rdata')
# My advise: always export data in csv with 'tab' separator:
fwrite(x = df.merged,file = 'merged_dataset.csv', sep = '\t')
# if you like Stata files:
library(haven)
# Importantly: Stata does not allow for '.' or other
# symbols in the column names. Replace them with '_':
setnames(df.merged, gsub('\\.', '_',tolower(names(df.merged))))
# Exporting it:
write_dta(data = df.merged, path = 'merged_dataset.dta')
library(ggplot2)
# Bar plot:
p <- ggplot(df.merged) +
geom_bar(aes(x = month.text))
p
df.months <- data.table(Month = 1:12, month.text = month.name)
df.months
merge.data.table(df.airqual,df.months)
df.merged <- merge.data.table(df.airqual,df.months)
# Bar plot:
p <- ggplot(df.merged) +
geom_bar(aes(x = month.text))
p
# Histogram:
p <- ggplot(df.merged) +
geom_histogram(aes(x = Temp))
p
# Importance of aesthetics:
p <- ggplot(df.merged) +
geom_histogram(aes(x = Temp, fill = month.text))
p
# Scatter plots (point):
ggplot(df.merged) +
geom_point(aes(Month,Temp, color = month.text))
# Importance of aesthetics:
ggplot(df.merged) +
geom_point(aes(Month,Temp, color = month.text))
# Scatter plots (point):
ggplot(df.merged) +
geom_point(aes(Month,Temp, color = month.text))
# Importance of aesthetics:
ggplot(df.merged) +
geom_point(aes(Month,Temp, color = month.text))
# Correlation wind vs. temperature:
ggplot(df.merged) +
geom_point(aes(Wind,Temp))
ggplot(df.merged) +
geom_point(aes(Wind,Temp,color = month.text))
# Adding a layer (in this case, functional format):
ggplot(df.merged) +
geom_point(aes(Wind,Temp)) +
geom_smooth(aes(Wind,Temp))
# Linear relation:
ggplot(df.merged) +
geom_point(aes(Wind,Temp)) +
geom_smooth(aes(Wind,Temp),method = 'lm')
# For hands-in exercises:
df.ex.1 <- data.table(datasets::CO2)
# For hands-in exercises:
# EX1
df.ex.1 <- data.table(datasets::CO2)
# EX1
rm(list = ls())
df.ex.1 <- data.table(datasets::CO2)
View(df.ex.1)
dfco2 <-tibble(df.ex.1)
p <- ggplot(dfco2) +
geom_histogram(aes(x=uptake, fill = Type))
p
#EX2: Murder rates across states
rm(list = ls())
df.ex.2 <- data.table(datasets::state.x77)
dfmurd <- tibbles(df.ex.2)
View(df.ex.2)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area)
dfmurd <- tibbles(df.ex.2)
(df.ex.2)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area)
dfmurd <- tibbles(df.ex.2)
dfmurd <- tibles(df.ex.2)
df.ex.2 <- data.table(datasets::state.x77)
dfmurd <- tibles(df.ex.2)
dfmurd <- tibble(df.ex.2)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
df.merged <- dfmurd %>%
left_join(dfmurdd)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
df.merged <- dfmurd %>%
left_join(dfmurdd)
View(dfmurdd)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = case_when(Density >= mean(Density))~ 1)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
as.numeric(Density)
dfmurdd <- dfmurd %>%
as.numeric(mutate(Density = Population/Area)) %>%
mutate(high.dens = case_when(Density >= mean(Density))~ 1)
#EX2: Murder rates across states
rm(list = ls())
df.ex.2 <- data.table(datasets::state.x77)
dfmurd <- tibble(df.ex.2)
dfmurdd <- dfmurd %>%
as.numeric(mutate(Density = Population/Area)) %>%
mutate(high.dens = case_when(Density >= mean(Density))~ 1)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = case_when(Density >= mean(Density))~ 1)
class(Density)
class(dfmurd$Density)
class(dfmurdd$Density)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = case_when(Density >= mean(Density))~ 1)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = 0)
View(dfmurdd)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = 0) %>%
high.dense = case_when(Density >= mean(Density))~ 1)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = 0) %>%
high.dense = case_when(Density >= mean(Density))~ 1
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = 0) %>%
high.dense = case_when(Density >= mean(Density)~ 1)
View(dfmurdd)
mutate(high.dens = case_when(Density >= mean(Density)~ 1)
mutate(high.dens = ifelse(Density >= mean(Density), T, F)
mutate(Density = Population/Area) %>%
mutate(high.dens = ifelse(Density >= mean(Density), T, F)
#EX2: Murder rates across states
rm(list = ls())
df.ex.2 <- data.table(datasets::state.x77)
dfmurd <- tibble(df.ex.2)
dfmurdd <- dfmurd %>%
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = ifelse(Density >= mean(Density), T, F))
#EX2: Murder rates across states
rm(list = ls())
df.ex.2 <- data.table(datasets::state.x77)
dfmurd <- tibble(df.ex.2)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = ifelse(Density >= mean(Density), T, F))
geom_point(aes(Income, Murder, color = high.dens)
p
p <- ggplot(dfmurdd) +
geom_point(aes(Income, Murder, color = high.dens))
p
p <- ggplot(dfmurdd) +
geom_point(aes(Income, Murder, color = high.dens)) +
geom_smooth(aes(Income, Murder))
p
df.fil <- dfmurdd %>%
filter(Income>6000)
p
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = ifelse(Density >= mean(Density), T, F))
p <- ggplot(dfmurdd) +
geom_point(aes(Income, Murder, color = high.dens)) +
geom_smooth(aes(Income, Murder))
p
df.fil <- dfmurdd %>%
filter(Income>6000)
p<- ggplot(df.fil) +
geom_point(aes(Income, Murder, color = high.dens)) +
geom_smooth(aes(Income, Murder))
p
#EX2: Murder rates across states
rm(list = ls())
df.ex.2 <- data.table(datasets::state.x77)
dfmurd <- tibble(df.ex.2)
dfmurdd <- dfmurd %>%
mutate(Density = Population/Area) %>%
mutate(high.dens = ifelse(Density >= mean(Density), T, F))
p <- ggplot(dfmurdd) +
geom_point(aes(Income, Murder, color = high.dens)) +
geom_smooth(aes(Income, Murder))
p
df.fil <- dfmurdd %>%
filter(Income>6000)
View(df.fil)
df.fil <- dfmurdd %>%
filter(Income<6000)
p<- ggplot(df.fil) +
geom_point(aes(Income, Murder, color = high.dens)) +
geom_smooth(aes(Income, Murder))
p
getwd() # learn which is the current working directory
getwd() # learn which is the current working directory
d
getwd() # learn which is the current working directory
